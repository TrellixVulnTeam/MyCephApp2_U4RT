import json

import requests
from requests_toolbelt.utils import dump

from .awsauth import S3Auth


def get_url_and_service(host='127.0.0.1', port='7480', cmd='/', vstyle=False, bucket=None):
    url = '%s%s:%s%s' % ('http://', host, port, cmd)
    service_url = '%s:%s' % (host, port)
    if vstyle:
        url = '%s%s.%s:%s%s' % ('http://', bucket, host, port, cmd)
    return url, service_url


def pretty_print_json(content):
    import subprocess
    proc = subprocess.Popen(
        ['python', '-m', 'json.tool'],
        stdin=subprocess.PIPE,
        stdout=subprocess.PIPE,
    )
    (output, error_output) = proc.communicate(content);
    return output


def pretty_print_xml(content):
    import subprocess
    proc = subprocess.Popen(
        ['xmllint', '--format', '/dev/stdin'],
        stdin=subprocess.PIPE,
        stdout=subprocess.PIPE,
    )
    (output, error_output) = proc.communicate(content);
    return output


def pretty_print(content):
    if content.startswith("<"):
        return pretty_print_xml(content)
    else:
        return pretty_print_json(content)


def s3_get(host='127.0.0.1', port='7480', cmd='/', access_key='', secret_key='', headers=None, show_dump=False,
           download_file=None, pretty=False, vstyle=False, bucket=None):
    '''
    get request use aws2
    '''

    url, service_url = get_url_and_service(host, port, cmd, vstyle, bucket)
    if headers:
        headers = json.loads(headers)
    if download_file:
        import shutil
        response = requests.get(url, auth=S3Auth(access_key, secret_key, service_url=service_url), stream=True,
                                headers=headers)
        if response.status_code == 200 or response.status_code == 206:
            with open(download_file, 'wb') as f:
                response.raw.decode_content = True
                shutil.copyfileobj(response.raw, f)
    else:
        response = requests.get(url, auth=S3Auth(access_key, secret_key, service_url=host + ":" + port),
                                headers=headers)

    if show_dump:
        data = dump.dump_all(response)
        print(data.decode('utf-8'))
    else:
        print pretty_print(response.content) if pretty else response.content


# TODO ADD POST METHOD
# multi-part upload use it ,we will add it later
def s3_post(host='127.0.0.1', port='7480', cmd='/', access_key='', secret_key='', headers=None, file=None, content=None,
            show_dump=False, pretty=False, vstyle=False, bucket=None):
    '''
    put request use aws2
    '''

    url, service_url = get_url_and_service(host, port, cmd, vstyle, bucket)
    if headers:
        headers = json.loads(headers)

    response = None
    if file:
        with open(file, 'rb') as fin:
            file_content = fin.read()
        # upload object from file
        response = requests.post(url, auth=S3Auth(access_key, secret_key, service_url=service_url),
                                 headers=headers, data=file_content)

    elif content:
        # upload object from content
        response = requests.post(url, auth=S3Auth(access_key, secret_key, service_url=service_url),
                                 headers=headers, data=content)
    else:
        # create bucket
        response = requests.post(url, auth=S3Auth(access_key, secret_key, service_url=service_url),
                                 headers=headers)
    if show_dump:
        data = dump.dump_all(response)
        print(data.decode('utf-8'))
    else:
        print pretty_print(response.content) if pretty else response.content


# TODO ADD HEADER AND DATA SUPPORDED
def s3_put(host='127.0.0.1', port='7480', cmd='/', access_key='', secret_key='', headers=None, file=None, content=None,
           show_dump=False, pretty=False, vstyle=False, bucket=None):
    '''
    put request use aws2
    '''
    url, service_url = get_url_and_service(host, port, cmd, vstyle, bucket)
    if headers:
        headers = json.loads(headers)

    response = None
    if file:
        with open(file, 'rb') as fin:
            file_content = fin.read()
        # upload object from file
        response = requests.put(url, auth=S3Auth(access_key, secret_key, service_url=service_url),
                                headers=headers, data=file_content)

    elif content:
        # upload object from content
        response = requests.put(url, auth=S3Auth(access_key, secret_key, service_url=service_url),
                                headers=headers, data=content)
    else:
        # create bucket
        response = requests.put(url, auth=S3Auth(access_key, secret_key, service_url=service_url),
                                headers=headers)
    if show_dump:
        data = dump.dump_all(response)
        print(data.decode('utf-8'))
    else:
        print pretty_print(response.content) if pretty else response.content


def s3_delete(host='127.0.0.1', port='7480', cmd='/', access_key='', secret_key='', show_dump=False, pretty=False,
              vstyle=False, bucket=None):
    '''
    delete request use aws2
    '''
    url, service_url = get_url_and_service(host, port, cmd, vstyle, bucket)
    response = requests.delete(url, auth=S3Auth(access_key, secret_key, service_url=service_url))
    if show_dump:
        data = dump.dump_all(response)
        print(data.decode('utf-8'))
    else:
        print pretty_print(response.content) if pretty else response.content


def s3_head(host='127.0.0.1', port='7480', cmd='/', access_key='', secret_key='', show_dump=False, pretty=False,
            vstyle=False, bucket=None):
    '''
    head request use aws2
    '''
    url, service_url = get_url_and_service(host, port, cmd, vstyle, bucket)
    response = requests.head(url, auth=S3Auth(access_key, secret_key, service_url=service_url))
    if show_dump:
        data = dump.dump_all(response)
        print(data.decode('utf-8'))
    else:
        print pretty_print(response.content) if pretty else response.content
